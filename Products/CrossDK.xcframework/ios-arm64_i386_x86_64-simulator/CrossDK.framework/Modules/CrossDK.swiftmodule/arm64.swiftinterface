// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CrossDK
import AVFoundation
import AVKit
import Foundation
import StoreKit
import Swift
import UIKit
import _Concurrency
extension CrossDK.CrossDKManager {
  public func load(crossDKOverlay: CrossDK.CrossDKOverlay)
}
public enum Colors {
}
@objc @_inheritsConvenienceInitializers public class CrossDKManager : ObjectiveC.NSObject {
  public func display(crossDKOverlay: CrossDK.CrossDKOverlay, window: UIKit.UIWindow, format: CrossDK.CrossDKOverlay.OverlayFormat, position: CrossDK.CrossDKOverlay.OverlayPosition, withCloseButton: Swift.Bool, isRewarded: Swift.Bool)
  public func load(crossDKOverlay: CrossDK.CrossDKOverlay, window: UIKit.UIWindow, format: CrossDK.CrossDKOverlay.OverlayFormat, position: CrossDK.CrossDKOverlay.OverlayPosition, withCloseButton: Swift.Bool, isRewarded: Swift.Bool)
  public func dismiss(window: UIKit.UIWindow)
  @objc override dynamic public init()
  @objc deinit
}
extension CrossDK.CrossDKManager : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
@available(iOS 14.0, *)
extension CrossDK.CrossDKManager : StoreKit.SKOverlayDelegate {
  @objc dynamic public func storeOverlayWillStartPresentation(_: StoreKit.SKOverlay, transitionContext _: StoreKit.SKOverlay.TransitionContext)
  @objc dynamic public func storeOverlayDidFinishPresentation(_: StoreKit.SKOverlay, transitionContext _: StoreKit.SKOverlay.TransitionContext)
  @objc dynamic public func storeOverlayWillStartDismissal(_: StoreKit.SKOverlay, transitionContext _: StoreKit.SKOverlay.TransitionContext)
  @objc dynamic public func storeOverlayDidFinishDismissal(_: StoreKit.SKOverlay, transitionContext _: StoreKit.SKOverlay.TransitionContext)
  @objc dynamic public func storeOverlayDidFailToLoad(_: StoreKit.SKOverlay, error: Swift.Error)
}
@objc public protocol CrossDKOverlayDelegate {
  @objc func overlayWillStartPresentation()
  @objc func overlayDidFinishPresentation()
  @objc func overlayWillStartDismissal()
  @objc func overlayDidFinishDismissal()
  @objc func overlayShowsRecommendedAppInAppStore()
  @objc func overlayStartsPlayingVideo()
  @objc func overlayPlayedHalfVideo()
  @objc func overlayDidFinishPlayingVideo()
  @objc func overlayDidRewardUserWithReward()
  @objc func overlayDidFailToLoad(error: Swift.Error)
  @objc func overlayDidPreload()
  @objc func overlayPreloadFailure()
  @objc func overlayPreloadExpired()
  @objc func overlayUnavailable(error: CrossDK.CrossDKOverlay.OverlayError)
}
@objc @_inheritsConvenienceInitializers public class CrossDKOverlay : ObjectiveC.NSObject {
  @objc weak public var delegate: CrossDK.CrossDKOverlayDelegate?
  @objc weak public var interstitialAdDelegate: CrossDK.InterstitialAdDelegate?
  @objc weak public var rewardedAdDelegate: CrossDK.RewardedAdDelegate?
  @objc public var sdkVersion: Swift.String?
  public var apiStatus: Swift.String?
  @objc public enum OverlayPosition : Swift.Int {
    case bottom
    case bottomRaised
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum OverlayFormat : Swift.Int {
    case banner
    case mid_size
    case interstitial
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum OverlayLoadingState : Swift.Int {
    case never
    case inProgress
    case finished
    case failed
    case expired
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum OverlayError : Swift.Int {
    case unsupportedOSVersion
    case unavailableWindowScene
    case unavailableRecommendation
    case noConfiguration
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc public func display(window: UIKit.UIWindow, format: CrossDK.CrossDKOverlay.OverlayFormat, position: CrossDK.CrossDKOverlay.OverlayPosition, withCloseButton: Swift.Bool, isRewarded: Swift.Bool)
  @objc public func load(window: UIKit.UIWindow, format: CrossDK.CrossDKOverlay.OverlayFormat, position: CrossDK.CrossDKOverlay.OverlayPosition, withCloseButton: Swift.Bool, isRewarded: Swift.Bool)
  @objc public func display()
  @objc deinit
}
@available(iOS 14.0, *)
extension CrossDK.CrossDKOverlay : StoreKit.SKOverlayDelegate {
  @objc dynamic public func storeOverlayWillStartPresentation(_: StoreKit.SKOverlay, transitionContext _: StoreKit.SKOverlay.TransitionContext)
  @objc dynamic public func storeOverlayDidFinishPresentation(_: StoreKit.SKOverlay, transitionContext _: StoreKit.SKOverlay.TransitionContext)
  @objc dynamic public func storeOverlayWillStartDismissal(_: StoreKit.SKOverlay, transitionContext _: StoreKit.SKOverlay.TransitionContext)
  @objc dynamic public func storeOverlayDidFinishDismissal(_: StoreKit.SKOverlay, transitionContext _: StoreKit.SKOverlay.TransitionContext)
  @objc dynamic public func storeOverlayDidFailToLoad(_: StoreKit.SKOverlay, error: Swift.Error)
}
extension CrossDK.CrossDKOverlay : CrossDK.CrossDKOverlayDelegate {
  @objc dynamic public func overlayWillStartPresentation()
  @objc dynamic public func overlayWillStartDismissal()
  @objc dynamic public func overlayDidFinishPresentation()
  @objc dynamic public func overlayDidFinishDismissal()
  @objc dynamic public func overlayShowsRecommendedAppInAppStore()
  @objc dynamic public func overlayStartsPlayingVideo()
  @objc dynamic public func overlayPlayedHalfVideo()
  @objc dynamic public func overlayDidFinishPlayingVideo()
  @objc dynamic public func overlayDidRewardUserWithReward()
  @objc dynamic public func overlayDidFailToLoad(error: Swift.Error)
  @objc dynamic public func overlayUnavailable(error: CrossDK.CrossDKOverlay.OverlayError)
  @objc dynamic public func overlayDidPreload()
  @objc dynamic public func overlayPreloadFailure()
  @objc dynamic public func overlayPreloadExpired()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class CachingPlayerItem : AVFoundation.AVPlayerItem {
  open func download()
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
public struct CrossDKRecommendationFilter {
  public init(churnedRankRange: Swift.ClosedRange<Swift.Float>? = nil, reopenRankRange: Swift.ClosedRange<Swift.Float>? = nil, installConversionProbaMin: Swift.Float? = nil, appIdDenylist: [Swift.String]? = nil, appIdAllowlist: [Swift.String]? = nil)
}
public enum Style {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CrossDKConfig : ObjectiveC.NSObject {
  @objc public static let shared: CrossDK.CrossDKConfig
  @objc public var apiStatus: Swift.String?
  @objc public var isConfigured: Swift.Bool {
    @objc get
  }
  @objc public var deviceId: Swift.String?
  @objc public func setup(appId: Swift.String, apiKey: Swift.String, userId: Swift.String? = nil)
  public func set(recommendationFilter: CrossDK.CrossDKRecommendationFilter)
  @objc deinit
}
@objc public protocol InterstitialAdDelegate {
  @objc func didLoadInterstitialAd()
  @objc func didFailToLoadInterstitialAd()
  @objc func didDisplayInterstitialAd()
  @objc func didFailToDisplayInterstitialAd()
  @objc func didHideInterstitialAd()
  @objc func didClickInterstitialAd()
}
@objc public protocol RewardedAdDelegate {
  @objc func didLoadRewardedAd()
  @objc func didFailToLoadRewardedAd()
  @objc func didDisplayRewardedAd()
  @objc func didFailToDisplayRewardedAd()
  @objc func didHideRewardedAd()
  @objc func didClickRewardedAd()
  @objc func didStartRewardedAdVideo()
  @objc func didCompleteRewardedAdVideo()
  @objc func didRewardUserWithReward()
}
extension CrossDK.CrossDKOverlay {
  @objc dynamic public func load()
  @objc dynamic public func dismiss(window: UIKit.UIWindow)
}
extension CrossDK.CrossDKOverlay : CrossDK.InterstitialAdDelegate {
  @objc dynamic public func didLoadInterstitialAd()
  @objc dynamic public func didFailToLoadInterstitialAd()
  @objc dynamic public func didDisplayInterstitialAd()
  @objc dynamic public func didFailToDisplayInterstitialAd()
  @objc dynamic public func didHideInterstitialAd()
  @objc dynamic public func didClickInterstitialAd()
}
extension CrossDK.CrossDKOverlay : CrossDK.RewardedAdDelegate {
  @objc dynamic public func didLoadRewardedAd()
  @objc dynamic public func didFailToLoadRewardedAd()
  @objc dynamic public func didDisplayRewardedAd()
  @objc dynamic public func didFailToDisplayRewardedAd()
  @objc dynamic public func didHideRewardedAd()
  @objc dynamic public func didClickRewardedAd()
  @objc dynamic public func didStartRewardedAdVideo()
  @objc dynamic public func didCompleteRewardedAdVideo()
  @objc dynamic public func didRewardUserWithReward()
}
extension CrossDK.CrossDKOverlay.OverlayPosition : Swift.Equatable {}
extension CrossDK.CrossDKOverlay.OverlayPosition : Swift.Hashable {}
extension CrossDK.CrossDKOverlay.OverlayPosition : Swift.RawRepresentable {}
extension CrossDK.CrossDKOverlay.OverlayFormat : Swift.Equatable {}
extension CrossDK.CrossDKOverlay.OverlayFormat : Swift.Hashable {}
extension CrossDK.CrossDKOverlay.OverlayFormat : Swift.RawRepresentable {}
extension CrossDK.CrossDKOverlay.OverlayLoadingState : Swift.Equatable {}
extension CrossDK.CrossDKOverlay.OverlayLoadingState : Swift.Hashable {}
extension CrossDK.CrossDKOverlay.OverlayLoadingState : Swift.RawRepresentable {}
extension CrossDK.CrossDKOverlay.OverlayError : Swift.Equatable {}
extension CrossDK.CrossDKOverlay.OverlayError : Swift.Hashable {}
extension CrossDK.CrossDKOverlay.OverlayError : Swift.RawRepresentable {}

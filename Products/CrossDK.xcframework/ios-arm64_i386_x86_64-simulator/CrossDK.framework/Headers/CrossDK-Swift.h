#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef CROSSDK_SWIFT_H
#define CROSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
@import StoreKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CrossDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;

/// Configuration class for <code>CrossDK</code>.
SWIFT_CLASS("_TtC7CrossDK13CrossDKConfig")
@interface CrossDKConfig : NSObject
/// Shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CrossDKConfig * _Nonnull shared;)
+ (CrossDKConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Current status state of the api.
@property (nonatomic, copy) NSString * _Nullable apiStatus;
/// Returns whether <code>CrossDK</code> is properly configured.
@property (nonatomic, readonly) BOOL isConfigured;
/// Current device ID.
@property (nonatomic, copy) NSString * _Nullable deviceId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Sets up configuration for <code>CrossDK</code>.
/// \param appId current application’s App Store ID
///
/// \param apiKey authorization API key
///
/// \param userId user’s ID
///
- (void)setupWithAppId:(NSString * _Nonnull)appId apiKey:(NSString * _Nonnull)apiKey userId:(NSString * _Nullable)userId;
@end


@protocol CrossDKOverlayDelegate;
@protocol InterstitialAdDelegate;
@protocol RewardedAdDelegate;
@class UIWindow;
enum OverlayFormat : NSInteger;
enum OverlayPosition : NSInteger;

/// Handles CrossDK’s overlays display.
SWIFT_CLASS("_TtC7CrossDK14CrossDKOverlay")
@interface CrossDKOverlay : NSObject
/// Delegate that gets notified on overlay state changes.
@property (nonatomic, weak) id <CrossDKOverlayDelegate> _Nullable delegate;
/// For ALAdikteevMediationAdapter : Delegate that gets notified on interstitial overlay state changes.
@property (nonatomic, weak) id <InterstitialAdDelegate> _Nullable interstitialAdDelegate;
/// For ALAdikteevMediationAdapter : Delegate that gets notified on interstitial overlay with rewarded state changes.
@property (nonatomic, weak) id <RewardedAdDelegate> _Nullable rewardedAdDelegate;
/// Returns the <code>CrossDK</code> version.
@property (nonatomic, copy) NSString * _Nullable sdkVersion;
/// Current status state of the api.
@property (nonatomic, copy) NSString * _Nullable apiStatus;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// For ALAdikteevMediationAdapter : Loads an Overlay view.
- (void)load;
/// Displays an Overlay view.
/// \param window current window
///
/// \param format banner, mid_size, interstitial overlay
///
/// \param position banner and mid_size overlay position
///
/// \param withCloseButton mid_size and interstitial overlay close button
///
/// \param isRewarded provides some kind of value for the user (interstitial format only)
///
- (void)displayWithWindow:(UIWindow * _Nonnull)window format:(enum OverlayFormat)format position:(enum OverlayPosition)position withCloseButton:(BOOL)withCloseButton isRewarded:(BOOL)isRewarded;
/// Dismisses an Overlay view.
/// \param window current window
///
- (void)dismissWithWindow:(UIWindow * _Nonnull)window;
@end

/// Identifies the position of an overlay on the screen.
typedef SWIFT_ENUM(NSInteger, OverlayPosition, open) {
/// Specifies that the overlay is at the bottom of the screen.
  OverlayPositionBottom = 0,
/// Specifies that the overlay is at a raised position at the bottom of the screen.
  OverlayPositionBottomRaised = 1,
};

/// Identifies the format of an overlay on the screen.
typedef SWIFT_ENUM(NSInteger, OverlayFormat, open) {
/// Presents the overlay in small format size.
  OverlayFormatBanner = 0,
/// Presents the overlay in medium format size.
  OverlayFormatMid_size = 1,
/// Presents the overlay in full format size.
  OverlayFormatInterstitial = 2,
};

/// Describes a specific error from <code>CrossDKOverlay</code>.
typedef SWIFT_ENUM(NSInteger, OverlayError, open) {
/// Indicates that current OS version is not supported.
  OverlayErrorUnsupportedOSVersion = 0,
/// Indicates that a scene couldn’t be retrieved from given <code>UIWindow</code>.
  OverlayErrorUnavailableWindowScene = 1,
/// Indicates that no recommendation is available at the moment.
  OverlayErrorUnavailableRecommendation = 2,
/// Indicates that <code>CrossDK</code> is not properly configured.
  OverlayErrorNoConfiguration = 3,
};

@class SKOverlay;
@class SKOverlayTransitionContext;

SWIFT_AVAILABILITY(ios,introduced=14.0)
@interface CrossDKOverlay (SWIFT_EXTENSION(CrossDK)) <SKOverlayDelegate>
/// Indicates that the platform presents an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ willStartPresentation:(SKOverlayTransitionContext * _Nonnull)_;
/// Indicates that the platform is finished presenting an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ didFinishPresentation:(SKOverlayTransitionContext * _Nonnull)_;
/// Indicates that the platform dismisses an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ willStartDismissal:(SKOverlayTransitionContext * _Nonnull)_;
/// Indicates that the platform finished dismissing an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ didFinishDismissal:(SKOverlayTransitionContext * _Nonnull)_;
/// Indicates that the platform failed to load an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ didFailToLoadWithError:(NSError * _Nonnull)error;
@end


/// For ALAdikteevMediationAdapter : Delegate that gets notified on interstitial overlay state changes.
SWIFT_PROTOCOL("_TtP7CrossDK22InterstitialAdDelegate_")
@protocol InterstitialAdDelegate
/// Indicates that the platform did load an interstitial ad.
- (void)didLoadInterstitialAd;
/// Indicates that the platform did fail to load an interstitial ad.
- (void)didFailToLoadInterstitialAd;
/// Indicates that the platform did display an interstitial ad.
- (void)didDisplayInterstitialAd;
/// Indicates that the platform did fail to display an interstitial ad.
- (void)didFailToDisplayInterstitialAd;
/// Indicates that the platform did hide an interstitial ad.
- (void)didHideInterstitialAd;
/// Indicates that the user did click an interstitial ad.
- (void)didClickInterstitialAd;
@end


@interface CrossDKOverlay (SWIFT_EXTENSION(CrossDK)) <InterstitialAdDelegate>
/// For ALAdikteevMediationAdapter : Indicates that the platform did load an interstitial ad.
- (void)didLoadInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did fail to load an interstitial ad.
- (void)didFailToLoadInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did display an interstitial ad.
- (void)didDisplayInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did fail to display an interstitial ad.
- (void)didFailToDisplayInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did hide an interstitial ad.
- (void)didHideInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the user did click an interstitial ad.
- (void)didClickInterstitialAd;
@end


/// For ALAdikteevMediationAdapter : Delegate that gets notified on interstitial overlay with rewarded state changes.
SWIFT_PROTOCOL("_TtP7CrossDK18RewardedAdDelegate_")
@protocol RewardedAdDelegate
/// Indicates that the platform did load a rewarded ad.
- (void)didLoadRewardedAd;
/// Indicates that the platform did fail to load a rewarded ad.
- (void)didFailToLoadRewardedAd;
/// Indicates that the platform did display a rewarded ad.
- (void)didDisplayRewardedAd;
/// Indicates that the platform did fail to display a rewarded ad.
- (void)didFailToDisplayRewardedAd;
/// Indicates that the platform did hide a rewarded ad.
- (void)didHideRewardedAd;
/// Indicates that the user did click a rewarded ad.
- (void)didClickRewardedAd;
/// Indicates that the platform did start a reward ad video.
- (void)didStartRewardedAdVideo;
/// Indicates that the platform did complete a reward ad video.
- (void)didCompleteRewardedAdVideo;
/// Indicates that the platform did reward user with reward.
- (void)didRewardUserWithReward;
@end


@interface CrossDKOverlay (SWIFT_EXTENSION(CrossDK)) <RewardedAdDelegate>
/// For ALAdikteevMediationAdapter : Indicates that the platform did load a rewarded ad.
- (void)didLoadRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did fail to load a rewarded ad.
- (void)didFailToLoadRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did display a rewarded ad.
- (void)didDisplayRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did fail to display a rewarded ad.
- (void)didFailToDisplayRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did hide a rewarded ad.
- (void)didHideRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the user did click a rewarded ad.
- (void)didClickRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did start a reward ad video.
- (void)didStartRewardedAdVideo;
/// For ALAdikteevMediationAdapter : Indicates that the platform did complete a reward ad video.
- (void)didCompleteRewardedAdVideo;
/// For ALAdikteevMediationAdapter : Indicates that the platform did reward user with reward.
- (void)didRewardUserWithReward;
@end



/// Delegate that gets notified on overlay state changes.
SWIFT_PROTOCOL("_TtP7CrossDK22CrossDKOverlayDelegate_")
@protocol CrossDKOverlayDelegate
/// Indicates that the platform presents an overlay.
- (void)overlayWillStartPresentation;
/// Indicates that the platform is finished presenting an overlay.
- (void)overlayDidFinishPresentation;
/// Indicates that the platform dismisses an overlay.
- (void)overlayWillStartDismissal;
/// Indicates that the platform finished dismissing an overlay.
- (void)overlayDidFinishDismissal;
/// Indicates that the platform shows a recommended app in the App Store.
- (void)overlayShowsRecommendedAppInAppStore;
/// Indicates that the platform starts playing the video.
- (void)overlayStartsPlayingVideo;
/// Indicates that the platform played half of the video.
- (void)overlayPlayedHalfVideo;
/// Indicates that the platform has finished playing the video.
- (void)overlayDidFinishPlayingVideo;
/// Indicates that the platform did reward user with reward.
- (void)overlayDidRewardUserWithReward;
/// Indicates that the platform failed to load an overlay.
- (void)overlayDidFailToLoadWithError:(NSError * _Nonnull)error;
/// Indicates that the overlay is not available.
/// \param error an error describing encountered issue
///
- (void)overlayUnavailableWithError:(enum OverlayError)error;
@end


@interface CrossDKOverlay (SWIFT_EXTENSION(CrossDK)) <CrossDKOverlayDelegate>
/// Indicates that the platform presents an overlay.
- (void)overlayWillStartPresentation;
/// Indicates that the platform dismisses an overlay.
- (void)overlayWillStartDismissal;
/// Indicates that the platform is finished presenting an overlay.
- (void)overlayDidFinishPresentation;
/// Indicates that the platform finished dismissing an overlay.
- (void)overlayDidFinishDismissal;
/// Indicates that the platform shows a recommended app in the App Store.
- (void)overlayShowsRecommendedAppInAppStore;
/// Indicates that the platform starts playing the video.
- (void)overlayStartsPlayingVideo;
/// Indicates that the platform played half of the video.
- (void)overlayPlayedHalfVideo;
/// Indicates that the platform has finished playing the video.
- (void)overlayDidFinishPlayingVideo;
/// Indicates that the platform did reward user with reward.
- (void)overlayDidRewardUserWithReward;
/// Indicates that the platform failed to load an overlay.
- (void)overlayDidFailToLoadWithError:(NSError * _Nonnull)error;
/// Indicates that an overlay is unavailable.
- (void)overlayUnavailableWithError:(enum OverlayError)error;
@end






#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef CROSSDK_SWIFT_H
#define CROSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
@import StoreKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CrossDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;

/// Configuration class for <code>CrossDK</code>.
SWIFT_CLASS("_TtC7CrossDK13CrossDKConfig")
@interface CrossDKConfig : NSObject
/// Shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CrossDKConfig * _Nonnull shared;)
+ (CrossDKConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Current status state of the api.
@property (nonatomic, copy) NSString * _Nullable apiStatus;
/// Returns whether <code>CrossDK</code> is properly configured.
@property (nonatomic, readonly) BOOL isConfigured;
/// Current device ID.
@property (nonatomic, copy) NSString * _Nullable deviceId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Sets up configuration for <code>CrossDK</code>.
/// \param appId current application’s App Store ID
///
/// \param apiKey authorization API key
///
/// \param userId user’s ID
///
- (void)setupWithAppId:(NSString * _Nonnull)appId apiKey:(NSString * _Nonnull)apiKey userId:(NSString * _Nullable)userId;
@end


@protocol CrossDKOverlayDelegate;
@protocol InterstitialAdDelegate;
@protocol RewardedAdDelegate;
@class UIWindow;
enum OverlayFormat : NSInteger;
enum OverlayPosition : NSInteger;

/// Handles CrossDK’s overlays display.
SWIFT_CLASS("_TtC7CrossDK14CrossDKOverlay")
@interface CrossDKOverlay : NSObject
/// Delegate that gets notified on overlay state changes.
@property (nonatomic, weak) id <CrossDKOverlayDelegate> _Nullable delegate;
/// For ALAdikteevMediationAdapter : Delegate that gets notified on interstitial overlay state changes.
@property (nonatomic, weak) id <InterstitialAdDelegate> _Nullable interstitialAdDelegate;
/// For ALAdikteevMediationAdapter : Delegate that gets notified on interstitial overlay with rewarded state changes.
@property (nonatomic, weak) id <RewardedAdDelegate> _Nullable rewardedAdDelegate;
/// Returns the <code>CrossDK</code> version.
@property (nonatomic, copy) NSString * _Nullable sdkVersion;
/// Current status state of the api.
@property (nonatomic, copy) NSString * _Nullable apiStatus;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// For ALAdikteevMediationAdapter : Loads an Overlay view.
- (void)load;
/// Displays an Overlay view.
/// \param window current window
///
/// \param format banner, mid_size, interstitial overlay
///
/// \param position banner and mid_size overlay position
///
/// \param withCloseButton mid_size and interstitial overlay close button
///
/// \param isRewarded provides some kind of value for the user (interstitial format only)
///
- (void)displayWithWindow:(UIWindow * _Nonnull)window format:(enum OverlayFormat)format position:(enum OverlayPosition)position withCloseButton:(BOOL)withCloseButton isRewarded:(BOOL)isRewarded;
/// Dismisses an Overlay view.
/// \param window current window
///
- (void)dismissWithWindow:(UIWindow * _Nonnull)window;
@end

/// Identifies the position of an overlay on the screen.
typedef SWIFT_ENUM(NSInteger, OverlayPosition, open) {
/// Specifies that the overlay is at the bottom of the screen.
  OverlayPositionBottom = 0,
/// Specifies that the overlay is at a raised position at the bottom of the screen.
  OverlayPositionBottomRaised = 1,
};

/// Identifies the format of an overlay on the screen.
typedef SWIFT_ENUM(NSInteger, OverlayFormat, open) {
/// Presents the overlay in small format size.
  OverlayFormatBanner = 0,
/// Presents the overlay in medium format size.
  OverlayFormatMid_size = 1,
/// Presents the overlay in full format size.
  OverlayFormatInterstitial = 2,
};

/// Describes a specific error from <code>CrossDKOverlay</code>.
typedef SWIFT_ENUM(NSInteger, OverlayError, open) {
/// Indicates that current OS version is not supported.
  OverlayErrorUnsupportedOSVersion = 0,
/// Indicates that a scene couldn’t be retrieved from given <code>UIWindow</code>.
  OverlayErrorUnavailableWindowScene = 1,
/// Indicates that no recommendation is available at the moment.
  OverlayErrorUnavailableRecommendation = 2,
/// Indicates that <code>CrossDK</code> is not properly configured.
  OverlayErrorNoConfiguration = 3,
};

@class SKOverlay;
@class SKOverlayTransitionContext;

SWIFT_AVAILABILITY(ios,introduced=14.0)
@interface CrossDKOverlay (SWIFT_EXTENSION(CrossDK)) <SKOverlayDelegate>
/// Indicates that the platform presents an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ willStartPresentation:(SKOverlayTransitionContext * _Nonnull)_;
/// Indicates that the platform is finished presenting an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ didFinishPresentation:(SKOverlayTransitionContext * _Nonnull)_;
/// Indicates that the platform dismisses an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ willStartDismissal:(SKOverlayTransitionContext * _Nonnull)_;
/// Indicates that the platform finished dismissing an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ didFinishDismissal:(SKOverlayTransitionContext * _Nonnull)_;
/// Indicates that the platform failed to load an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ didFailToLoadWithError:(NSError * _Nonnull)error;
@end


/// For ALAdikteevMediationAdapter : Delegate that gets notified on interstitial overlay state changes.
SWIFT_PROTOCOL("_TtP7CrossDK22InterstitialAdDelegate_")
@protocol InterstitialAdDelegate
/// Indicates that the platform did load an interstitial ad.
- (void)didLoadInterstitialAd;
/// Indicates that the platform did fail to load an interstitial ad.
- (void)didFailToLoadInterstitialAd;
/// Indicates that the platform did display an interstitial ad.
- (void)didDisplayInterstitialAd;
/// Indicates that the platform did fail to display an interstitial ad.
- (void)didFailToDisplayInterstitialAd;
/// Indicates that the platform did hide an interstitial ad.
- (void)didHideInterstitialAd;
/// Indicates that the user did click an interstitial ad.
- (void)didClickInterstitialAd;
@end


@interface CrossDKOverlay (SWIFT_EXTENSION(CrossDK)) <InterstitialAdDelegate>
/// For ALAdikteevMediationAdapter : Indicates that the platform did load an interstitial ad.
- (void)didLoadInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did fail to load an interstitial ad.
- (void)didFailToLoadInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did display an interstitial ad.
- (void)didDisplayInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did fail to display an interstitial ad.
- (void)didFailToDisplayInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did hide an interstitial ad.
- (void)didHideInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the user did click an interstitial ad.
- (void)didClickInterstitialAd;
@end


/// For ALAdikteevMediationAdapter : Delegate that gets notified on interstitial overlay with rewarded state changes.
SWIFT_PROTOCOL("_TtP7CrossDK18RewardedAdDelegate_")
@protocol RewardedAdDelegate
/// Indicates that the platform did load a rewarded ad.
- (void)didLoadRewardedAd;
/// Indicates that the platform did fail to load a rewarded ad.
- (void)didFailToLoadRewardedAd;
/// Indicates that the platform did display a rewarded ad.
- (void)didDisplayRewardedAd;
/// Indicates that the platform did fail to display a rewarded ad.
- (void)didFailToDisplayRewardedAd;
/// Indicates that the platform did hide a rewarded ad.
- (void)didHideRewardedAd;
/// Indicates that the user did click a rewarded ad.
- (void)didClickRewardedAd;
/// Indicates that the platform did start a reward ad video.
- (void)didStartRewardedAdVideo;
/// Indicates that the platform did complete a reward ad video.
- (void)didCompleteRewardedAdVideo;
/// Indicates that the platform did reward user with reward.
- (void)didRewardUserWithReward;
@end


@interface CrossDKOverlay (SWIFT_EXTENSION(CrossDK)) <RewardedAdDelegate>
/// For ALAdikteevMediationAdapter : Indicates that the platform did load a rewarded ad.
- (void)didLoadRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did fail to load a rewarded ad.
- (void)didFailToLoadRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did display a rewarded ad.
- (void)didDisplayRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did fail to display a rewarded ad.
- (void)didFailToDisplayRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did hide a rewarded ad.
- (void)didHideRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the user did click a rewarded ad.
- (void)didClickRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did start a reward ad video.
- (void)didStartRewardedAdVideo;
/// For ALAdikteevMediationAdapter : Indicates that the platform did complete a reward ad video.
- (void)didCompleteRewardedAdVideo;
/// For ALAdikteevMediationAdapter : Indicates that the platform did reward user with reward.
- (void)didRewardUserWithReward;
@end



/// Delegate that gets notified on overlay state changes.
SWIFT_PROTOCOL("_TtP7CrossDK22CrossDKOverlayDelegate_")
@protocol CrossDKOverlayDelegate
/// Indicates that the platform presents an overlay.
- (void)overlayWillStartPresentation;
/// Indicates that the platform is finished presenting an overlay.
- (void)overlayDidFinishPresentation;
/// Indicates that the platform dismisses an overlay.
- (void)overlayWillStartDismissal;
/// Indicates that the platform finished dismissing an overlay.
- (void)overlayDidFinishDismissal;
/// Indicates that the platform shows a recommended app in the App Store.
- (void)overlayShowsRecommendedAppInAppStore;
/// Indicates that the platform starts playing the video.
- (void)overlayStartsPlayingVideo;
/// Indicates that the platform played half of the video.
- (void)overlayPlayedHalfVideo;
/// Indicates that the platform has finished playing the video.
- (void)overlayDidFinishPlayingVideo;
/// Indicates that the platform did reward user with reward.
- (void)overlayDidRewardUserWithReward;
/// Indicates that the platform failed to load an overlay.
- (void)overlayDidFailToLoadWithError:(NSError * _Nonnull)error;
/// Indicates that the overlay is not available.
/// \param error an error describing encountered issue
///
- (void)overlayUnavailableWithError:(enum OverlayError)error;
@end


@interface CrossDKOverlay (SWIFT_EXTENSION(CrossDK)) <CrossDKOverlayDelegate>
/// Indicates that the platform presents an overlay.
- (void)overlayWillStartPresentation;
/// Indicates that the platform dismisses an overlay.
- (void)overlayWillStartDismissal;
/// Indicates that the platform is finished presenting an overlay.
- (void)overlayDidFinishPresentation;
/// Indicates that the platform finished dismissing an overlay.
- (void)overlayDidFinishDismissal;
/// Indicates that the platform shows a recommended app in the App Store.
- (void)overlayShowsRecommendedAppInAppStore;
/// Indicates that the platform starts playing the video.
- (void)overlayStartsPlayingVideo;
/// Indicates that the platform played half of the video.
- (void)overlayPlayedHalfVideo;
/// Indicates that the platform has finished playing the video.
- (void)overlayDidFinishPlayingVideo;
/// Indicates that the platform did reward user with reward.
- (void)overlayDidRewardUserWithReward;
/// Indicates that the platform failed to load an overlay.
- (void)overlayDidFailToLoadWithError:(NSError * _Nonnull)error;
/// Indicates that an overlay is unavailable.
- (void)overlayUnavailableWithError:(enum OverlayError)error;
@end






#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef CROSSDK_SWIFT_H
#define CROSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
@import StoreKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CrossDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;

/// Configuration class for <code>CrossDK</code>.
SWIFT_CLASS("_TtC7CrossDK13CrossDKConfig")
@interface CrossDKConfig : NSObject
/// Shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CrossDKConfig * _Nonnull shared;)
+ (CrossDKConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Current status state of the api.
@property (nonatomic, copy) NSString * _Nullable apiStatus;
/// Returns whether <code>CrossDK</code> is properly configured.
@property (nonatomic, readonly) BOOL isConfigured;
/// Current device ID.
@property (nonatomic, copy) NSString * _Nullable deviceId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Sets up configuration for <code>CrossDK</code>.
/// \param appId current application’s App Store ID
///
/// \param apiKey authorization API key
///
/// \param userId user’s ID
///
- (void)setupWithAppId:(NSString * _Nonnull)appId apiKey:(NSString * _Nonnull)apiKey userId:(NSString * _Nullable)userId;
@end


@protocol CrossDKOverlayDelegate;
@protocol InterstitialAdDelegate;
@protocol RewardedAdDelegate;
@class UIWindow;
enum OverlayFormat : NSInteger;
enum OverlayPosition : NSInteger;

/// Handles CrossDK’s overlays display.
SWIFT_CLASS("_TtC7CrossDK14CrossDKOverlay")
@interface CrossDKOverlay : NSObject
/// Delegate that gets notified on overlay state changes.
@property (nonatomic, weak) id <CrossDKOverlayDelegate> _Nullable delegate;
/// For ALAdikteevMediationAdapter : Delegate that gets notified on interstitial overlay state changes.
@property (nonatomic, weak) id <InterstitialAdDelegate> _Nullable interstitialAdDelegate;
/// For ALAdikteevMediationAdapter : Delegate that gets notified on interstitial overlay with rewarded state changes.
@property (nonatomic, weak) id <RewardedAdDelegate> _Nullable rewardedAdDelegate;
/// Returns the <code>CrossDK</code> version.
@property (nonatomic, copy) NSString * _Nullable sdkVersion;
/// Current status state of the api.
@property (nonatomic, copy) NSString * _Nullable apiStatus;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// For ALAdikteevMediationAdapter : Loads an Overlay view.
- (void)load;
/// Displays an Overlay view.
/// \param window current window
///
/// \param format banner, mid_size, interstitial overlay
///
/// \param position banner and mid_size overlay position
///
/// \param withCloseButton mid_size and interstitial overlay close button
///
/// \param isRewarded provides some kind of value for the user (interstitial format only)
///
- (void)displayWithWindow:(UIWindow * _Nonnull)window format:(enum OverlayFormat)format position:(enum OverlayPosition)position withCloseButton:(BOOL)withCloseButton isRewarded:(BOOL)isRewarded;
/// Dismisses an Overlay view.
/// \param window current window
///
- (void)dismissWithWindow:(UIWindow * _Nonnull)window;
@end

/// Identifies the position of an overlay on the screen.
typedef SWIFT_ENUM(NSInteger, OverlayPosition, open) {
/// Specifies that the overlay is at the bottom of the screen.
  OverlayPositionBottom = 0,
/// Specifies that the overlay is at a raised position at the bottom of the screen.
  OverlayPositionBottomRaised = 1,
};

/// Identifies the format of an overlay on the screen.
typedef SWIFT_ENUM(NSInteger, OverlayFormat, open) {
/// Presents the overlay in small format size.
  OverlayFormatBanner = 0,
/// Presents the overlay in medium format size.
  OverlayFormatMid_size = 1,
/// Presents the overlay in full format size.
  OverlayFormatInterstitial = 2,
};

/// Describes a specific error from <code>CrossDKOverlay</code>.
typedef SWIFT_ENUM(NSInteger, OverlayError, open) {
/// Indicates that current OS version is not supported.
  OverlayErrorUnsupportedOSVersion = 0,
/// Indicates that a scene couldn’t be retrieved from given <code>UIWindow</code>.
  OverlayErrorUnavailableWindowScene = 1,
/// Indicates that no recommendation is available at the moment.
  OverlayErrorUnavailableRecommendation = 2,
/// Indicates that <code>CrossDK</code> is not properly configured.
  OverlayErrorNoConfiguration = 3,
};

@class SKOverlay;
@class SKOverlayTransitionContext;

SWIFT_AVAILABILITY(ios,introduced=14.0)
@interface CrossDKOverlay (SWIFT_EXTENSION(CrossDK)) <SKOverlayDelegate>
/// Indicates that the platform presents an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ willStartPresentation:(SKOverlayTransitionContext * _Nonnull)_;
/// Indicates that the platform is finished presenting an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ didFinishPresentation:(SKOverlayTransitionContext * _Nonnull)_;
/// Indicates that the platform dismisses an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ willStartDismissal:(SKOverlayTransitionContext * _Nonnull)_;
/// Indicates that the platform finished dismissing an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ didFinishDismissal:(SKOverlayTransitionContext * _Nonnull)_;
/// Indicates that the platform failed to load an overlay.
- (void)storeOverlay:(SKOverlay * _Nonnull)_ didFailToLoadWithError:(NSError * _Nonnull)error;
@end


/// For ALAdikteevMediationAdapter : Delegate that gets notified on interstitial overlay state changes.
SWIFT_PROTOCOL("_TtP7CrossDK22InterstitialAdDelegate_")
@protocol InterstitialAdDelegate
/// Indicates that the platform did load an interstitial ad.
- (void)didLoadInterstitialAd;
/// Indicates that the platform did fail to load an interstitial ad.
- (void)didFailToLoadInterstitialAd;
/// Indicates that the platform did display an interstitial ad.
- (void)didDisplayInterstitialAd;
/// Indicates that the platform did fail to display an interstitial ad.
- (void)didFailToDisplayInterstitialAd;
/// Indicates that the platform did hide an interstitial ad.
- (void)didHideInterstitialAd;
/// Indicates that the user did click an interstitial ad.
- (void)didClickInterstitialAd;
@end


@interface CrossDKOverlay (SWIFT_EXTENSION(CrossDK)) <InterstitialAdDelegate>
/// For ALAdikteevMediationAdapter : Indicates that the platform did load an interstitial ad.
- (void)didLoadInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did fail to load an interstitial ad.
- (void)didFailToLoadInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did display an interstitial ad.
- (void)didDisplayInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did fail to display an interstitial ad.
- (void)didFailToDisplayInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did hide an interstitial ad.
- (void)didHideInterstitialAd;
/// For ALAdikteevMediationAdapter : Indicates that the user did click an interstitial ad.
- (void)didClickInterstitialAd;
@end


/// For ALAdikteevMediationAdapter : Delegate that gets notified on interstitial overlay with rewarded state changes.
SWIFT_PROTOCOL("_TtP7CrossDK18RewardedAdDelegate_")
@protocol RewardedAdDelegate
/// Indicates that the platform did load a rewarded ad.
- (void)didLoadRewardedAd;
/// Indicates that the platform did fail to load a rewarded ad.
- (void)didFailToLoadRewardedAd;
/// Indicates that the platform did display a rewarded ad.
- (void)didDisplayRewardedAd;
/// Indicates that the platform did fail to display a rewarded ad.
- (void)didFailToDisplayRewardedAd;
/// Indicates that the platform did hide a rewarded ad.
- (void)didHideRewardedAd;
/// Indicates that the user did click a rewarded ad.
- (void)didClickRewardedAd;
/// Indicates that the platform did start a reward ad video.
- (void)didStartRewardedAdVideo;
/// Indicates that the platform did complete a reward ad video.
- (void)didCompleteRewardedAdVideo;
/// Indicates that the platform did reward user with reward.
- (void)didRewardUserWithReward;
@end


@interface CrossDKOverlay (SWIFT_EXTENSION(CrossDK)) <RewardedAdDelegate>
/// For ALAdikteevMediationAdapter : Indicates that the platform did load a rewarded ad.
- (void)didLoadRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did fail to load a rewarded ad.
- (void)didFailToLoadRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did display a rewarded ad.
- (void)didDisplayRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did fail to display a rewarded ad.
- (void)didFailToDisplayRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did hide a rewarded ad.
- (void)didHideRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the user did click a rewarded ad.
- (void)didClickRewardedAd;
/// For ALAdikteevMediationAdapter : Indicates that the platform did start a reward ad video.
- (void)didStartRewardedAdVideo;
/// For ALAdikteevMediationAdapter : Indicates that the platform did complete a reward ad video.
- (void)didCompleteRewardedAdVideo;
/// For ALAdikteevMediationAdapter : Indicates that the platform did reward user with reward.
- (void)didRewardUserWithReward;
@end



/// Delegate that gets notified on overlay state changes.
SWIFT_PROTOCOL("_TtP7CrossDK22CrossDKOverlayDelegate_")
@protocol CrossDKOverlayDelegate
/// Indicates that the platform presents an overlay.
- (void)overlayWillStartPresentation;
/// Indicates that the platform is finished presenting an overlay.
- (void)overlayDidFinishPresentation;
/// Indicates that the platform dismisses an overlay.
- (void)overlayWillStartDismissal;
/// Indicates that the platform finished dismissing an overlay.
- (void)overlayDidFinishDismissal;
/// Indicates that the platform shows a recommended app in the App Store.
- (void)overlayShowsRecommendedAppInAppStore;
/// Indicates that the platform starts playing the video.
- (void)overlayStartsPlayingVideo;
/// Indicates that the platform played half of the video.
- (void)overlayPlayedHalfVideo;
/// Indicates that the platform has finished playing the video.
- (void)overlayDidFinishPlayingVideo;
/// Indicates that the platform did reward user with reward.
- (void)overlayDidRewardUserWithReward;
/// Indicates that the platform failed to load an overlay.
- (void)overlayDidFailToLoadWithError:(NSError * _Nonnull)error;
/// Indicates that the overlay is not available.
/// \param error an error describing encountered issue
///
- (void)overlayUnavailableWithError:(enum OverlayError)error;
@end


@interface CrossDKOverlay (SWIFT_EXTENSION(CrossDK)) <CrossDKOverlayDelegate>
/// Indicates that the platform presents an overlay.
- (void)overlayWillStartPresentation;
/// Indicates that the platform dismisses an overlay.
- (void)overlayWillStartDismissal;
/// Indicates that the platform is finished presenting an overlay.
- (void)overlayDidFinishPresentation;
/// Indicates that the platform finished dismissing an overlay.
- (void)overlayDidFinishDismissal;
/// Indicates that the platform shows a recommended app in the App Store.
- (void)overlayShowsRecommendedAppInAppStore;
/// Indicates that the platform starts playing the video.
- (void)overlayStartsPlayingVideo;
/// Indicates that the platform played half of the video.
- (void)overlayPlayedHalfVideo;
/// Indicates that the platform has finished playing the video.
- (void)overlayDidFinishPlayingVideo;
/// Indicates that the platform did reward user with reward.
- (void)overlayDidRewardUserWithReward;
/// Indicates that the platform failed to load an overlay.
- (void)overlayDidFailToLoadWithError:(NSError * _Nonnull)error;
/// Indicates that an overlay is unavailable.
- (void)overlayUnavailableWithError:(enum OverlayError)error;
@end






#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif

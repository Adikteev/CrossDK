// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CrossDK
import AVKit
import Foundation
import StoreKit
import Swift
import UIKit
import _Concurrency
public protocol CrossDKVideoOverlayDelegate : AnyObject {
  func videoOverlayDidFinishPresentation()
  func videoOverlayDidFinishDismissal()
  func videoOverlayShowsRecommendedAppInAppStore()
  func videoOverlayStartsPlayingVideo()
  func videoOverlayPlayedHalfVideo()
  func videoOverlayDidFinishlayingVideo()
  func videoOverlayDidFailToLoad()
}
public protocol CrossDKOverlayDelegate : AnyObject {
  func storeOverlayWillStartPresentation()
  func storeOverlayDidFinishPresentation()
  func storeOverlayWillStartDismissal()
  func storeOverlayDidFinishDismissal()
  func storeOverlayDidFailToLoad(error: Swift.Error)
  func overlayUnavailable(error: CrossDK.CrossDKOverlay.OverlayError)
}
@objc @_inheritsConvenienceInitializers public class CrossDKOverlay : ObjectiveC.NSObject {
  weak public var delegateOverlay: CrossDK.CrossDKOverlayDelegate?
  weak public var delegateVideoOverlay: CrossDK.CrossDKVideoOverlayDelegate?
  public enum OverlayPosition {
    case bottom
    case bottomRaised
    public static func == (a: CrossDK.CrossDKOverlay.OverlayPosition, b: CrossDK.CrossDKOverlay.OverlayPosition) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum VideoOverlayPosition {
    case bottom
    case bottomRaised
    public static func == (a: CrossDK.CrossDKOverlay.VideoOverlayPosition, b: CrossDK.CrossDKOverlay.VideoOverlayPosition) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum OverlayError : Swift.Error {
    case unsupportedOSVersion
    case unavailableWindowScene
    case unavailableRecommendation
    case noConfiguration
    public static func == (a: CrossDK.CrossDKOverlay.OverlayError, b: CrossDK.CrossDKOverlay.OverlayError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  public func displayOverlay(window: UIKit.UIWindow, position: CrossDK.CrossDKOverlay.OverlayPosition)
  public func dismissOverlay(window: UIKit.UIWindow)
  public func displayVideoOverlay(window: UIKit.UIWindow, position: CrossDK.CrossDKOverlay.VideoOverlayPosition)
  public func dismissVideoOverlay()
  public func closeButton(isHidden: Swift.Bool)
  @objc deinit
}
@available(iOS 14.0, *)
extension CrossDK.CrossDKOverlay : StoreKit.SKOverlayDelegate {
  @objc dynamic public func storeOverlayWillStartPresentation(_: StoreKit.SKOverlay, transitionContext _: StoreKit.SKOverlay.TransitionContext)
  @objc dynamic public func storeOverlayDidFinishPresentation(_: StoreKit.SKOverlay, transitionContext _: StoreKit.SKOverlay.TransitionContext)
  @objc dynamic public func storeOverlayWillStartDismissal(_: StoreKit.SKOverlay, transitionContext _: StoreKit.SKOverlay.TransitionContext)
  @objc dynamic public func storeOverlayDidFinishDismissal(_: StoreKit.SKOverlay, transitionContext _: StoreKit.SKOverlay.TransitionContext)
  @objc dynamic public func storeOverlayDidFailToLoad(_: StoreKit.SKOverlay, error: Swift.Error)
}
extension CrossDK.CrossDKOverlay : CrossDK.CrossDKVideoOverlayDelegate {
  public func videoOverlayDidFinishPresentation()
  public func videoOverlayDidFinishDismissal()
  public func videoOverlayShowsRecommendedAppInAppStore()
  public func videoOverlayStartsPlayingVideo()
  public func videoOverlayPlayedHalfVideo()
  public func videoOverlayDidFinishlayingVideo()
  public func videoOverlayDidFailToLoad()
}
public struct CrossDKRecommendationFilter {
  public init(churnedRankRange: Swift.ClosedRange<Swift.Float>? = nil, reopenRankRange: Swift.ClosedRange<Swift.Float>? = nil, installConversionProbaMin: Swift.Float? = nil, appIdDenylist: [Swift.String]? = nil, appIdAllowlist: [Swift.String]? = nil)
}
public enum Style {
}
public enum StarRounding : Swift.Int {
  case roundToHalfStar
  case roundToStar
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class CrossDKConfig {
  public static let shared: CrossDK.CrossDKConfig
  public var isConfigured: Swift.Bool {
    get
  }
  public func setup(appId: Swift.String, apiKey: Swift.String, userId: Swift.String? = nil)
  public func set(recommendationFilter: CrossDK.CrossDKRecommendationFilter)
  @objc deinit
}
extension CrossDK.CrossDKOverlay.OverlayPosition : Swift.Equatable {}
extension CrossDK.CrossDKOverlay.OverlayPosition : Swift.Hashable {}
extension CrossDK.CrossDKOverlay.VideoOverlayPosition : Swift.Equatable {}
extension CrossDK.CrossDKOverlay.VideoOverlayPosition : Swift.Hashable {}
extension CrossDK.CrossDKOverlay.OverlayError : Swift.Equatable {}
extension CrossDK.CrossDKOverlay.OverlayError : Swift.Hashable {}
extension CrossDK.StarRounding : Swift.Equatable {}
extension CrossDK.StarRounding : Swift.Hashable {}
extension CrossDK.StarRounding : Swift.RawRepresentable {}
